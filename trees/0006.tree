\date{2025-09-07T09:49:19Z}
\title{TallyGuard}
\author{nitin}

\p{TallyGuard uses Paillier Encryption}

\p{
    The scheme works by discarding the private key of the Paillier scheme and using it as a hash with additive homomorphic properties. 
    It aggregates the cast votes in plaintext and publishes this aggregate that can be hashed and checked if it matches with the accumulated hash.
}

\p{
    \strong{Some Concerns}: The encryption scheme is used as a hash scheme here (maybe this is not advisable?). In this method, the aggregation is still done with the plaintext only.
    This can be a problem if we want to aggregate at a constituency level, then the plaintext votes will have to be transferred to another device where
    it is tallied. This might lead to exposing of votes. This would be a problem for the voter privacy notions. 
}

\p{
    Doubts:
    \ol{
        \li{What if #{k_{priv}} is not discarded. Does this beat the security notion of election authorities not being able to recover a result.
        But at the same point, we can argue that if the machine decides to store plaintext vote information, then nothing can be done anyways. But
        still, this is a single point of failure.}
        \li{Can we do better \em{Dispute resolution}, with the suggested method, the only way is to go through the paper trail to resolve disputes.}
        
    }
    An Open problem listed was that only tallied-as-recorded is software independent. All other processes still require us to trust the hardware and software.
}